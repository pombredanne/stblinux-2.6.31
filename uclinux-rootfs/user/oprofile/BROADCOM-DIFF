#
# THESE FILES WERE MODIFIED BY BROADCOM CORPORATION ON 2009-12-04
#
# Original package: oprofile-0.9.3.tar.bz2
#
diff -ruNp oprofile.orig/daemon/liblegacy/opd_mapping.c oprofile/daemon/liblegacy/opd_mapping.c
--- oprofile.orig/daemon/liblegacy/opd_mapping.c	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/daemon/liblegacy/opd_mapping.c	2009-12-04 18:30:10.000000000 -0800
@@ -20,6 +20,7 @@
 
 #include <sys/mman.h>
 #include <limits.h>
+#include <linux/limits.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
diff -ruNp oprofile.orig/daemon/opd_anon.c oprofile/daemon/opd_anon.c
--- oprofile.orig/daemon/opd_anon.c	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/daemon/opd_anon.c	2009-12-04 18:30:10.000000000 -0800
@@ -23,6 +23,7 @@
 #include "op_libiberty.h"
 
 #include <limits.h>
+#include <linux/limits.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
diff -ruNp oprofile.orig/daemon/opd_cookie.c oprofile/daemon/opd_cookie.c
--- oprofile.orig/daemon/opd_cookie.c	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/daemon/opd_cookie.c	2009-12-04 18:30:10.000000000 -0800
@@ -16,6 +16,7 @@
 #include <sys/syscall.h>
 #include <unistd.h>
 #include <limits.h>
+#include <linux/limits.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
diff -ruNp oprofile.orig/daemon/opd_mangling.c oprofile/daemon/opd_mangling.c
--- oprofile.orig/daemon/opd_mangling.c	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/daemon/opd_mangling.c	2009-12-04 18:30:10.000000000 -0800
@@ -28,6 +28,7 @@
 #include "op_libiberty.h"
 
 #include <limits.h>
+#include <linux/limits.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
diff -ruNp oprofile.orig/events/mips/bcm3300/events oprofile/events/mips/bcm3300/events
--- oprofile.orig/events/mips/bcm3300/events	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/events/mips/bcm3300/events	2009-12-04 18:30:10.000000000 -0800
@@ -0,0 +1,23 @@
+#
+# Bcm3300 events
+#
+# As standard the CPU supports 4 performance counters.  
+# Events 5,6,9,a,11,12,42,45,4b
+# are available on all counters; 
+#
+# In this processor, events are grouped by module, only events from the same
+# module can be used simultanously.
+# Events 11, 12 can be used all the time.
+# Events 5, 6 are in the Instruction cache module and can be used together.
+# Events 9,a are in the Data cache module and can be used together.
+# All other events, 42, 45, 4b must be used alone or only in conjunction with 11 and/or 12.
+#
+event:5 counters:0,1,2,3 um:zero minimum:500 name:ICACHE_MISSES : Instruction cache misses (no D-cache misses)
+event:6 counters:0 um:zero minimum:500 name:ICACHE_HITS : Instruction cache hits
+event:9 counters:0,1,2,3 um:zero minimum:500 name:DATA_CACHE_MISS : Data cache miss
+event:a counters:0,1,2,3 um:zero minimum:500 name:DATA_CACHE_HIT : Data cache hit
+event:11 counters:0,1,2,3 um:zero minimum:500 name:INSTRUCTIONS_EXECUTED : Instructions executed
+event:12 counters:0,1,2,3 um:zero minimum:500 name:CYCLES : Processor cycles (PClock)
+event:42 counters:0,1,2,3 um:zero minimum:500 name:L1_CACHE_MISS : RAC lookup or read accesses due to L1 cache misses
+event:45 counters:0,1,2,3 um:zero minimum:500 name:RAC_HIT : RAC hit
+event:4b counters:0,1,2,3 um:zero minimum:500 name:RAC_BLOCK_REQUEST : Block requests due to prefetch
diff -ruNp oprofile.orig/events/mips/bcm3300/unit_masks oprofile/events/mips/bcm3300/unit_masks
--- oprofile.orig/events/mips/bcm3300/unit_masks	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/events/mips/bcm3300/unit_masks	2009-12-04 18:30:10.000000000 -0800
@@ -0,0 +1,5 @@
+#
+# MIPS bcm3300 possible unit masks
+#
+name:zero type:mandatory default:0x0
+	0x0 No unit mask
diff -ruNp oprofile.orig/events/mips/bcm4350/events oprofile/events/mips/bcm4350/events
--- oprofile.orig/events/mips/bcm4350/events	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/events/mips/bcm4350/events	2009-12-04 18:30:09.000000000 -0800
@@ -0,0 +1,23 @@
+#
+# Bcm4350 events
+#
+# As standard the CPU supports 4 performance counters.  
+# Events 5,6,9,10,17,18,66,69,75
+# are available on all counters; 
+#
+# In this processor, events are grouped by module, only events from the same
+# module can be used simultanously.
+# Events 17, 18 can be used all the time.
+# Events 5, 6 are in the Instruction cache module and can be used together.
+# Events 9,10 are in the Data cache module and can be used together.
+# All other events, 66,69,75 must be used alone or only in conjunction with 17 and/or 18.
+#
+event:5 counters:0,1,2,3 um:zero minimum:500 name:ICACHE_MISSES : Instruction cache misses (no D-cache misses)
+event:6 counters:0 um:zero minimum:500 name:ICACHE_HITS : Instruction cache hits
+event:9 counters:0,1,2,3 um:zero minimum:500 name:DATA_CACHE_MISS : Data cache miss
+event:10 counters:0,1,2,3 um:zero minimum:500 name:DATA_CACHE_HIT : Data cache hit
+event:17 counters:0,1,2,3 um:zero minimum:500 name:INSTRUCTIONS_EXECUTED : Instructions executed
+event:18 counters:0,1,2,3 um:zero minimum:500 name:CYCLES : Processor cycles (PClock)
+event:66 counters:0,1,2,3 um:zero minimum:500 name:L1_CACHE_MISS : RAC lookup or read accesses due to L1 cache misses
+event:69 counters:0,1,2,3 um:zero minimum:500 name:RAC_HIT : RAC hit
+event:75 counters:0,1,2,3 um:zero minimum:500 name:RAC_BLOCK_REQUEST : Block requests due to prefetch
diff -ruNp oprofile.orig/events/mips/bcm4350/unit_masks oprofile/events/mips/bcm4350/unit_masks
--- oprofile.orig/events/mips/bcm4350/unit_masks	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/events/mips/bcm4350/unit_masks	2009-12-04 18:30:09.000000000 -0800
@@ -0,0 +1,5 @@
+#
+# MIPS bcm4350 possible unit masks
+#
+name:zero type:mandatory default:0x0
+	0x0 No unit mask
diff -ruNp oprofile.orig/events/mips/bcm4380/events oprofile/events/mips/bcm4380/events
--- oprofile.orig/events/mips/bcm4380/events	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/events/mips/bcm4380/events	2009-12-04 18:30:10.000000000 -0800
@@ -0,0 +1,29 @@
+#
+# Bcm4350 events
+#
+# As standard the CPU supports 4 performance counters.  
+# Events 5,6,9,10,17,18,66,69,75
+# are available on all counters; 
+#
+# In this processor, events are grouped by module, only events from the same
+# module can be used simultanously.
+# Events 17, 18 can be used all the time.
+# Events 5, 6 are in the Instruction cache module and can be used together.
+# Events 9,10 are in the Data cache module and can be used together.
+# All other events, 66,69,75 must be used alone or only in conjunction with 17 and/or 18.
+#
+event:0x005 counters:0,1,2,3 um:zero minimum:500 name:ICACHE_MISSES : Instruction cache misses (no D-cache misses)
+event:0x006 counters:0,1,2,3 um:zero minimum:500 name:ICACHE_HITS : Instruction cache hits
+event:0x009 counters:0,1,2,3 um:zero minimum:500 name:DCACHE_MISSES : Data cache miss
+event:0x00a counters:0,1,2,3 um:zero minimum:500 name:DCACHE_HITS : Data cache hit
+event:0x011 counters:0,1,2,3 um:zero minimum:500 name:INSTRUCTIONS_EXECUTED : Instructions executed
+event:0x012 counters:0,1,2,3 um:zero minimum:500 name:CYCLES : Processor cycles (PClock)
+event:0x042 counters:0,1,2,3 um:zero minimum:500 name:L1_CACHE_MISSES : RAC lookup or read accesses due to L1 cache misses
+event:0x045 counters:0,1,2,3 um:zero minimum:500 name:RAC_HITS : RAC hit
+event:0x04b counters:0,1,2,3 um:zero minimum:500 name:RAC_BLOCK_REQUEST : Block requests due to prefetch
+event:0x101 counters:0,1,2,3 um:zero minimum:500 name:CPU_STALL_CYCLES : Stall cycles
+event:0x103 counters:0,1,2,3 um:zero minimum:500 name:CPU_KERNEL_CYCLES : Cycles spent in kernel mode
+event:0x201 counters:0,1,2,3 um:zero minimum:500 name:CPU_USER_CYCLES : Cycles spent in user mode
+event:0x10a counters:0,1,2,3 um:zero minimum:500 name:EXCEPTIONS : Number of exceptions and interrupts
+event:0x301 counters:0,1,2,3 um:zero minimum:500 name:L2_HITS : L2 cache hits
+event:0x300 counters:0,1,2,3 um:zero minimum:500 name:L2_MISSES : L2 cache misses
diff -ruNp oprofile.orig/events/mips/bcm4380/unit_masks oprofile/events/mips/bcm4380/unit_masks
--- oprofile.orig/events/mips/bcm4380/unit_masks	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/events/mips/bcm4380/unit_masks	2009-12-04 18:30:10.000000000 -0800
@@ -0,0 +1,5 @@
+#
+# MIPS bcm4350 possible unit masks
+#
+name:zero type:mandatory default:0x0
+	0x0 No unit mask
diff -ruNp oprofile.orig/events/mips/bcm5000/events oprofile/events/mips/bcm5000/events
--- oprofile.orig/events/mips/bcm5000/events	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/events/mips/bcm5000/events	2009-12-04 18:30:09.000000000 -0800
@@ -0,0 +1,123 @@
+#
+# Bcm5000 events
+#
+# As standard the CPU supports 4 performance counters.  
+# are available on all counters; 
+#
+#
+event:0x000 counters:0,1,2,3 um:zero minimum:500 name:CYCLES : Execution cycles 
+event:0x001 counters:0,1,2,3 um:zero minimum:500 name:RETIRED_CYCLES : this event may occur twice per cycle.
+event:0x002 counters:0,2 um:zero minimum:500 name:FETCHED_BRANCH_INSTRUCTIONS : fetched branch instructions.
+event:0x002 counters:1,3 um:zero minimum:500 name:TOTAL_BRANCH_MISPREDICTIONS : total branch mispredictions.
+event:0x003 counters:0,2 um:zero minimum:500 name:BHT_REFERENCE : BHT references.
+event:0x003 counters:1,3 um:zero minimum:500 name:BHT_MISPREDICTIONS : BHT mispredictiosn.
+event:0x004 counters:0,2 um:zero minimum:500 name:BTB_MISPREDICTIONS : BTB mispredictiosn.
+event:0x004 counters:1,3 um:zero minimum:500 name:BTB_REFERENCE : BTB references.
+event:0x005 counters:0,2 um:zero minimum:500 name:CRS_MISPREDICTIONS : CRS mispredictiosn.
+event:0x005 counters:1,3 um:zero minimum:500 name:CRS_REFERENCE : CRS references.
+event:0x006 counters:0,2 um:zero minimum:500 name:ITLB_REFERENCE : ITLB references.
+event:0x006 counters:1,3 um:zero minimum:500 name:ITLB_MISPREDICTIONS : ITLB miss.
+event:0x007 counters:0,2 um:zero minimum:500 name:DTLB_REFERENCE : DTLB references.
+event:0x007 counters:1,3 um:zero minimum:500 name:DTLB_MISPREDICTIONS : DTLB miss.
+event:0x008 counters:0,2 um:zero minimum:500 name:JTLB_INSTRUCTION_REFERENCE : JTLB instruction references.
+event:0x008 counters:1,3 um:zero minimum:500 name:JTLB_INSTRUCTION_MISPREDICTIONS : JTLB instruction miss.
+event:0x009 counters:0,2 um:zero minimum:500 name:JTLB_DATA_REFERENCE : JTLB data references.
+event:0x009 counters:1,3 um:zero minimum:500 name:JTLB_DATA_MISPREDICTIONS : JTLB data miss.
+event:0x00b counters:1,3 um:zero minimum:500 name:ICACHE_INVALIDATION : Instruction cache invalidation.
+event:0x010 counters:0,2 um:zero minimum:500 name:LOAD_REPLAYS : Load replays.
+event:0x010 counters:1,3 um:zero minimum:500 name:STORE_REPLAYS : Store replays.
+event:0x011 counters:0,2 um:zero minimum:500 name:LOAD_REPLAYS_RESOURCE_UNAVAIL : Load replays due to resource unavailable.
+event:0x011 counters:1,3 um:zero minimum:500 name:STORE_REPLAYS_RESOURCE_UNAVAIL  : Store replays due to resource unavailable.
+event:0x015 counters:0,2 um:zero minimum:500 name:RETIRED_LOAD_INSTRUCTIONS : Retired load instructions.
+event:0x015 counters:1,3 um:zero minimum:500 name:RETIRED_ALU_INSTRUCTIONS  : Retired ALU instructions.
+event:0x016 counters:0,2 um:zero minimum:500 name:RETIRED_STORE_INSTRUCTIONS : Retired store instructions.
+event:0x016 counters:1,3 um:zero minimum:500 name:RETIRED_MULTIPLY_DIV_INSTRUCTIONS  : Retired multiply/divide instructions.
+event:0x017 counters:0,2 um:zero minimum:500 name:RETIRED_PREFETCH_INSTRUCTIONS : Retired prefetch instructions.
+event:0x017 counters:1,3 um:zero minimum:500 name:RETIRED_FPU_INSTRUCTIONS  : Retired FPU instructions.
+event:0x018 counters:0,2 um:zero minimum:500 name:RETIRED_PREFETCH_INSTRUCTIONS_NO_ACTION : Retired prefetch instructions that has no actions.
+event:0x018 counters:1,3 um:zero minimum:500 name:RETIRED_DSP_INSTRUCTIONS  : Retired DSP instructions.
+event:0x019 counters:0,2 um:zero minimum:500 name:RETIRED_JPIPE_INSTRUCTIONS : Retired J-pipe instructions.
+event:0x019 counters:1,3 um:zero minimum:500 name:RETIRED_KPIPE_INSTRUCTIONS  : Retired K-pipe instructions.
+event:0x01a counters:0,2 um:zero minimum:500 name:EXCEPTIONS : Number of exceptions.
+event:0x01a counters:1,3 um:zero minimum:500 name:INTERRUPTS : Number of interrupts.
+event:0x01c counters:0,2 um:zero minimum:500 name:L2_REFERENCES : L2-Cache references.
+event:0x01c counters:1,3 um:zero minimum:500 name:L2_MISSES : L2-Cache misses.
+event:0x01d counters:0,2 um:zero minimum:500 name:L2_DIRTY_EVICTIONS : L2-Cache dirty evictions.
+event:0x01d counters:1,3 um:zero minimum:500 name:L2_INVALIDATIONS : L2-Cache invalidations.
+event:0x01e counters:0,2 um:zero minimum:500 name:L2_HW_PREFETCH : L2-Cache hardware prefetches.
+event:0x01e counters:1,3 um:zero minimum:500 name:L2_PREFETCH_USED : L2-Cache prefetched lines that is really used.
+event:0x01f counters:0,2 um:zero minimum:500 name:L2_I_MISSES : L2-Cache I misses that cause line fill.
+event:0x01f counters:1,3 um:zero minimum:500 name:L2_I_REFERENCES : L2-Cache I references.
+event:0x020 counters:0,2 um:zero minimum:500 name:L2_D_MISSES : L2-Cache D misses that cause line fill.
+event:0x020 counters:1,3 um:zero minimum:500 name:L2_D_REFERENCES : L2-Cache D references.
+event:0x023 counters:0,2 um:zero minimum:500 name:BIU_NON_CACHEABLE_LOAD_REQ : BIU non-cacheable load requests.
+event:0x023 counters:1,3 um:zero minimum:500 name:BIU_NON_CACHEABLE_STORE_REQ : BIU non-cacheable store requests.
+event:0x024 counters:0,2 um:zero minimum:500 name:BIU_CACHEABLE_LOAD_REQ : BIU cacheable load requests.
+event:0x024 counters:1,3 um:zero minimum:500 name:BIU_CACHEABLE_STORE_REQ : BIU cacheable store requests.
+event:0x025 counters:0,2 um:zero minimum:500 name:BIU_PREFETCH_REQ : BIU prefetch requests.
+event:0x025 counters:1,3 um:zero minimum:500 name:BIU_DOUBLE_PREFETCH_REQ : BIU double prefetch requests.
+event:0x026 counters:1,3 um:zero minimum:500 name:BIU_CACHEABLE_PARTIALLINE_STORE_REQ : BIU cacheable partial line requests.
+event:0x028 counters:0,2 um:zero minimum:500 name:CYCLES_NO_INSTRUCTION_FETCH : Cycles when no instructions are fetched.
+event:0x028 counters:1,3 um:zero minimum:500 name:CYCLES_STANDBY : Cycles the thread is standby mode resulting from a WAIT instruction.
+event:0x029 counters:0,1,2,3 um:zero minimum:500 name:CYCLES_BOTH_IBUFS_EMPTY : Cycles when both IBUFs(including bypass registers) are empty.
+event:0x02a counters:0,1,2,3 um:zero minimum:500 name:CYCLES_IBUF_EMPTY : Cycles when specified IBUF(including bypass registers) is empty.
+event:0x02b counters:0,2 um:zero minimum:500 name:CYCLES_BRANCH_MISPREDICTION_SIG : Cycles when branch misprediction signal is on.
+event:0x02b counters:1,3 um:zero minimum:500 name:CYCLES_ITLB_MISS : Cycles serving ITLB misses when event 41(MT=0)/42(MT=10) is true.
+event:0x02c counters:1,3 um:zero minimum:500 name:CYCLES_ICACHE_MISS : Cycles serving I-Cache misses when event 41(MT=0)/42(MT=10) is true.
+event:0x02d counters:0,2 um:zero minimum:500 name:CYCLES_JPIPE_NO_INSTRUCTION : Cycles when J-pipe issues no instructions.
+event:0x02d counters:1,3 um:zero minimum:500 name:CYCLES_JPIPE_REPLAY_INSTRUCTION : Cycles when J-pipe issues replayed instructions.
+event:0x02e counters:0,2 um:zero minimum:500 name:CYCLES_JPIPE_NO_INSTRUCTION_IN_IBUF : Cycles when J-pipe issues no instructions because of no instrucitons in IBUF.
+event:0x02e counters:1,3 um:zero minimum:500 name:CYCLES_JPIPE_NO_INSTRUCTION_WAIT : Cycles when J-pipe issues no instructions because of waiting for oprands(include data from a load).
+event:0x02f counters:0,2 um:zero minimum:500 name:CYCLES_JPIPE_NO_INSTRUCTION_WAIT_DATA : Cycles when J-pipe issues no instructions because of waiting for data from a load.
+event:0x02f counters:1,3 um:zero minimum:500 name:CYCLES_JPIPE_REPLAY_INSTRUCTION :  Cycles when J-pipe issues no instructions because of resource conflict.
+event:0x030 counters:0,2 um:zero minimum:500 name:CYCLES_KPIPE_NO_INSTRUCTION : Cycles when K-pipe issues no instructions.
+event:0x030 counters:1,3 um:zero minimum:500 name:CYCLES_KPIPE_REPLAY_INSTRUCTION : Cycles when K-pipe issues replayed instructions.
+event:0x031 counters:0,2 um:zero minimum:500 name:CYCLES_KPIPE_NO_INSTRUCTION_IN_IBUF : Cycles when K-pipe issues no instructions because of no instrucitons in IBUF.
+event:0x031 counters:1,3 um:zero minimum:500 name:CYCLES_KPIPE_NO_INSTRUCTION_WAIT : Cycles when K-pipe issues no instructions because of waiting for oprands(include data from a load).
+event:0x032 counters:0,2 um:zero minimum:500 name:CYCLES_KPIPE_NO_INSTRUCTION_WAIT_DATA : Cycles when K-pipe issues no instructions because of waiting for data from a load.
+event:0x032 counters:1,3 um:zero minimum:500 name:CYCLES_KPIPE_REPLAY_INSTRUCTION :  Cycles when K-pipe issues no instructions because of resource conflict.
+event:0x033 counters:0,2 um:zero minimum:500 name:CYCLES_FPU_PIPE_NO_INSTRUCTION : Cycles when FPU_-pipe issues no instructions.
+event:0x033 counters:1,3 um:zero minimum:500 name:CYCLES_FPU_PIPE_REPLAY_INSTRUCTION : Cycles when FPU_-pipe issues replayed instructions.
+event:0x034 counters:0,2 um:zero minimum:500 name:CYCLES_PENDING_ICACHE_MISS_REQ : Cycles whenever pending I-Cache miss requests waiting to be issued to L2-Cache input request buffer.
+event:0x034 counters:1,3 um:zero minimum:500 name:CYCLES_ICACHE_MISSES : Cycles serving I-Cache misses. Count whenever there are outstanding requests.
+event:0x035 counters:0,2 um:zero minimum:500 name:CYCLES_PENDING_DCACHE_MISS_REQ : Cycles whenever pending D-Cache miss requests waiting to be issued to L2-Cache input request buffer.
+event:0x035 counters:1,3 um:zero minimum:500 name:CYCLES_DCACHE_MISSES : Cycles serving D-Cache misses. Count whenever there are outstanding requests.
+event:0x036 counters:0,2 um:zero minimum:500 name:CYCLES_L2_REQ_BLOCK : Cycles when a request in L2-Cache input request queue is blocked.
+event:0x036 counters:1,3 um:zero minimum:500 name:CYCLES_L2_MISSES : Cycles serving L2-Cache misses. Counted whenever there are outstanding request.
+event:0x037 counters:0,2 um:zero minimum:500 name:CYCLES_L2_REQ_BLOCK_EVICTION : Cycles when a request in L2-Cache input request queue is blocked because of an eviction is in progress.
+event:0x037 counters:1,3 um:zero minimum:500 name:CYCLES_L2_REQ_BLOCK_REFILL : Cycles when a request in L2-Cache input request queue is blocked because of an refill is in progress.
+event:0x038 counters:0,2 um:zero minimum:500 name:CYCLES_L2_REQ_NO_CREDIT : Cycles when a request in L2-Cache input request queue is blocked because of no credit.
+event:0x038 counters:1,3 um:zero minimum:500 name:CYCLES_L2_REQ_BANK_CONFLICT : Cycles when a request in L2-Cache input request queue is blocked because of bank conflict.
+event:0x039 counters:0,2 um:zero minimum:500 name:CYCLES_CACHEABLE_LOAD_NO_CREDIT : Cycles when a cacheable load request in L2-Cache input request queue is blocked because of no credit.
+event:0x039 counters:1,3 um:zero minimum:500 name:CYCLES_CACHEABLE_STORE_NO_CREDIT : Cycles when a cacheable store request in L2-Cache input request queue is blocked because of no credit.
+event:0x03a counters:0,2 um:zero minimum:500 name:CYCLES_BIU_CACHEABLE_LOAD : Cycles serving BIU cacheable load request.
+event:0x03a counters:1,3 um:zero minimum:500 name:CYCLES_BIU_CACHEABLE_STORE : Cycles serving BIU cacheable store request.
+event:0x03b counters:0,2 um:zero minimum:500 name:CYCLES_BIU_UNCACHEABLE_LOAD : Cycles serving BIU uncacheable load request.
+event:0x03b counters:1,3 um:zero minimum:500 name:CYCLES_BIU_UNCACHEABLE_STORE : Cycles serving BIU uncacheable store request.
+event:0x03c counters:0,2 um:zero minimum:500 name:CYCLES_WAIT_BIU_CACHEABLE_LOAD : Cycles serving BIU cacheable load request.
+event:0x03c counters:1,3 um:zero minimum:500 name:CYCLES_WAIT_BIU_CACHEABLE_STORE : Cycles serving BIU cacheable store request.
+event:0x03d counters:0,2 um:zero minimum:500 name:CYCLES_WAIT_BIU_UNCACHEABLE_LOAD : Cycles serving BIU uncacheable load request.
+event:0x03d counters:1,3 um:zero minimum:500 name:CYCLES_WAIT_BIU_UNCACHEABLE_STORE : Cycles serving BIU uncacheable store request.
+event:0x03e counters:0,2 um:zero minimum:500 name:CYCLES_ALU_SKEWED_1 : Cycles when ALU is skewed 1 cycle.
+event:0x03e counters:1,3 um:zero minimum:500 name:CYCLES_ALU_SKEWED_2 : Cycles when ALU is skewed 2 cycle.
+event:0x03f counters:0,2 um:zero minimum:500 name:CYCLES_ALU_SKEWED_3 : Cycles when ALU is skewed 3 cycle.
+
+#
+#event specific to counter 0, 2
+#
+event:0x00a counters:0,2 um:zero minimum:500 name:ICACHE_REFERENCE : Instruction cache refernces.
+event:0x00c counters:0,2 um:zero minimum:500 name:DCACHE_REFERENCE : Data cache refernces.
+event:0x00d counters:0,2 um:zero minimum:500 name:DCACHE_DIRTY_EVICTIONS : Data cache dirty evictions.
+event:0x00e counters:0,2 um:zero minimum:500 name:DCACHE_LOAD_MISSES : Data cache load misses.
+event:0x00f counters:0,2 um:zero minimum:500 name:DCACHE_STORE_MISSES : Data cache store misses.
+event:0x012 counters:0,2 um:zero minimum:500 name:LOAD_REPLAYS_HIT_STORE_BUFFER : Load replays due to a hit to store buffer.
+
+#
+#event specific to counter 1, 3
+#
+event:0x00a counters:1,3 um:zero minimum:500 name:ICACHE_MISSES : Instruction cache miss.
+event:0x00c counters:1,3 um:zero minimum:500 name:DCACHE_MISSES : Data cache miss.
+event:0x00d counters:1,3 um:zero minimum:500 name:DCACHE_INVALIDATIONS : Data cache invalidations.
+event:0x00e counters:1,3 um:zero minimum:500 name:DCACHE_LOADS : Data cache loads.
+event:0x00f counters:1,3 um:zero minimum:500 name:DCACHE_STORES : Data cache stores.
+event:0x012 counters:1,3 um:zero minimum:500 name:STORE_REPLAYS_STORE_BUFFER_FULL  : Store replays due to store buffer full.
diff -ruNp oprofile.orig/events/mips/bcm5000/unit_masks oprofile/events/mips/bcm5000/unit_masks
--- oprofile.orig/events/mips/bcm5000/unit_masks	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/events/mips/bcm5000/unit_masks	2009-12-04 18:30:10.000000000 -0800
@@ -0,0 +1,5 @@
+#
+# MIPS bcm5000 possible unit masks
+#
+name:zero type:mandatory default:0x0
+	0x0 No unit mask
diff -ruNp oprofile.orig/events/mips/bcm7038/events oprofile/events/mips/bcm7038/events
--- oprofile.orig/events/mips/bcm7038/events	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/events/mips/bcm7038/events	2009-12-04 18:30:09.000000000 -0800
@@ -0,0 +1,37 @@
+#
+# Bcm7038 events
+#
+# As standard the CPU supports 2 performance counters.  Event 0, 2, 3, 4
+# are available on both counters; events 11, 12, 13, 14-counter1 are reserved;
+# Event 15-counter1 and event 1-counter0 are the same;
+# the remaining are counter-specific.
+
+event:0 counters:0,1 um:zero minimum:500 name:CYCLES : Processor cycles (PClock)
+event:2 counters:0,1 um:zero minimum:500 name:LOAD_PREF_CACHE_INSTRUCTIONS : Load, prefetch/CacheOps execution (no sync)
+event:3 counters:0,1 um:zero minimum:500 name:STORES : Store execution
+event:4 counters:0,1 um:zero minimum:500 name:BRANCHES : Branch execution (no jumps or jump registers)
+
+#
+# Events specific to counter 0
+#
+event:1 counters:0 um:zero minimum:500 name:INSTRUCTIONS_FETCHED : Instructions fetched
+event:5 counters:0 um:zero minimum:500 name:FAILED_CONDITIONAL_STORES : Failed conditional stores
+event:6 counters:0 um:zero minimum:500 name:DTLB_ACCESSES : Data micro-TLB accesses
+event:7 counters:0 um:zero minimum:500 name:ITLB_MISS : ITLB misses
+event:8 counters:0 um:zero minimum:500 name:DTLB_MISS : DTLB miss
+event:9 counters:0 um:zero minimum:500 name:ICACHE_MISSES : Instruction cache misses (no D-cache misses)
+event:10 counters:0 um:zero minimum:500 name:INSTRUCTION_SCHEDULED : Instruction scheduled
+event:14 counters:0 um:zero minimum:500 name:DUAL_INSNS_EXECUTED : Dual issued  instructions executed
+event:15 counters:0 um:zero minimum:500 name:INSTRUCTIONS_EXECUTED : Instructions executed
+
+#
+# Events specific to counter 1
+#
+event:1 counters:1 um:zero minimum:500 name:INSTRUCTIONS_EXECUTED : Instructions executed
+event:5 counters:1 um:zero minimum:500 name:FP_INSTRUCTIONS : FP instruction execution
+event:6 counters:1 um:zero minimum:500 name:DCACHE_LINE_EVICTED : Data cache line evicted
+event:7 counters:1 um:zero minimum:500 name:TLB_MISS : TLB miss exceptions
+event:8 counters:1 um:zero minimum:500 name:BRANCH_MISPREDICTED : Branch mispredicted
+event:9 counters:1 um:zero minimum:500 name:DATA_CACHE_MISS : Data cache miss
+event:10 counters:1 um:zero minimum:500 name:STALLS : Instruction stall in M stage due to scheduling conflicts
+event:15 counters:1 um:zero minimum:500 name:COP2_INSTRUCTIONS_EXECUTED : COP2 instructions executed
diff -ruNp oprofile.orig/events/mips/bcm7038/unit_masks oprofile/events/mips/bcm7038/unit_masks
--- oprofile.orig/events/mips/bcm7038/unit_masks	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/events/mips/bcm7038/unit_masks	2009-12-04 18:30:09.000000000 -0800
@@ -0,0 +1,5 @@
+#
+# MIPS bcm7038 possible unit masks
+#
+name:zero type:mandatory default:0x0
+	0x0 No unit mask
diff -ruNp oprofile.orig/libop/op_config.c oprofile/libop/op_config.c
--- oprofile.orig/libop/op_config.c	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/libop/op_config.c	2009-12-04 18:30:10.000000000 -0800
@@ -12,6 +12,7 @@
 #include "op_config_24.h"
 
 #include <limits.h>
+#include <linux/limits.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
diff -ruNp oprofile.orig/libop/op_cpu_type.c oprofile/libop/op_cpu_type.c
--- oprofile.orig/libop/op_cpu_type.c	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/libop/op_cpu_type.c	2009-12-04 18:30:10.000000000 -0800
@@ -72,6 +72,11 @@ static struct cpu_descr const cpu_descrs
 	{ "ARM MPCore", "arm/mpcore", CPU_ARM_MPCORE, 2 },
 	{ "ARM V6 PMU", "arm/armv6", CPU_ARM_V6, 3 },
 	{ "ppc64 POWER5++", "ppc64/power5++", CPU_PPC64_POWER5pp, 6 },
+	{ "Broadcom 7038", "mips/bcm7038", CPU_MIPS_BCM7038, 2},
+	{ "Broadcom 4350", "mips/bcm4350", CPU_MIPS_BCM4350, 4},
+	{ "Broadcom 3300", "mips/bcm3300", CPU_MIPS_BCM3300, 4},
+	{ "Broadcom 4380", "mips/bcm4380", CPU_MIPS_BCM4380, 4},
+	{ "Broadcom 5000", "mips/bcm5000", CPU_MIPS_BCM5000, 4},
 };
  
 static size_t const nr_cpu_descrs = sizeof(cpu_descrs) / sizeof(struct cpu_descr);
diff -ruNp oprofile.orig/libop/op_cpu_type.h oprofile/libop/op_cpu_type.h
--- oprofile.orig/libop/op_cpu_type.h	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/libop/op_cpu_type.h	2009-12-04 18:30:10.000000000 -0800
@@ -70,6 +70,11 @@ typedef enum {
 	CPU_ARM_MPCORE, /**< ARM MPCore */
 	CPU_ARM_V6, /**< ARM V6 */
 	CPU_PPC64_POWER5pp,  /**< ppc64 Power5++ family */
+       	CPU_MIPS_BCM7038, /**< MIPS BCM7038 */
+	CPU_MIPS_BCM4350, /**< MIPS BCM4350 */
+	CPU_MIPS_BCM3300,  /**< MIPS BCM3300 */
+	CPU_MIPS_BCM4380, /**< MIPS BCM4380 */
+	CPU_MIPS_BCM5000, /**< MIPS BCM5000 */
 	MAX_CPU_TYPE
 } op_cpu;
 
diff -ruNp oprofile.orig/libop/op_events.c oprofile/libop/op_events.c
--- oprofile.orig/libop/op_events.c	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/libop/op_events.c	2009-12-04 18:30:10.000000000 -0800
@@ -845,6 +845,26 @@ void op_default_event(op_cpu cpu_type, s
 			descr->name = "CPU_CLK";
 			break;
 
+		case CPU_MIPS_BCM7038:
+			descr->name = "CYCLES";
+			break;
+
+		case CPU_MIPS_BCM4350:
+			descr->name = "CYCLES";
+			break;
+
+		case CPU_MIPS_BCM3300:
+			descr->name = "CYCLES";
+			break;
+             
+		case CPU_MIPS_BCM4380:
+                        descr->name = "CYCLES";
+                        break;
+
+		case CPU_MIPS_BCM5000:
+                        descr->name = "CYCLES";
+                        break;
+
 		// don't use default, if someone add a cpu he wants a compiler
 		// warning if he forgets to handle it here.
 		case CPU_TIMER_INT:
diff -ruNp oprofile.orig/libutil++/child_reader.cpp oprofile/libutil++/child_reader.cpp
--- oprofile.orig/libutil++/child_reader.cpp	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/libutil++/child_reader.cpp	2009-12-04 18:30:10.000000000 -0800
@@ -10,6 +10,7 @@
  */
 
 #include <unistd.h>
+#include <linux/limits.h>
 #include <sys/wait.h>
 
 #include <cerrno>
diff -ruNp oprofile.orig/makefile oprofile/makefile
--- oprofile.orig/makefile	1969-12-31 16:00:00.000000000 -0800
+++ oprofile/makefile	2009-12-04 18:30:10.000000000 -0800
@@ -0,0 +1,98 @@
+include $(ROOTDIR)/config.arch
+
+TOOL_DIR_PREFIX=$(shell dirname $(shell which $(CC)))/..
+
+ifneq (,$(findstring linux,$(CROSS)))
+	TARGET=$(CROSS:linux-=linux)
+	TARGET_ARCH ?= $(CROSS:-linux-=)
+else
+	ifneq (,$(findstring uclibc,$(CROSS)))
+		TARGET_ARCH ?= $(CROSS:-uclibc-=)
+		TARGET=$(TARGET_ARCH)-linux
+	else
+		echo "FIXME: Cannot determine target architecture"
+		exit 99
+	endif
+endif
+UCLIBC_INC = -I$(ROOTDIR)/uClibc/include
+LINUX_INC=-I$(ROOTDIR)/$(LINUXDIR)/include
+GCC_INC=-I$(TOOL_DIR_PREFIX)/$(TARGET)/include
+GXX_INC=-I$(TOOL_DIR_PREFIX)/$(TARGET)/include/c++/4.2.0 -I$(TOOL_DIR_PREFIX)/$(TARGET)/include
+# THT: For libiberty.h
+BFD_INCLUDE=-I$(ROOTDIR)/lib/binutils/bfd -I$(ROOTDIR)/lib/binutils/include
+# THT: Order is important, as we want to use the uClibc headers first,
+# and the headers from gcc last.
+MY_CFLAGS += $(BFD_INCLUDE) -I$(ROOTDIR)/user/popt $(GCC_INC)
+MY_CPPFLAGS += $(MY_CFLAGS)
+MY_CXXFLAGS = $(GXX_INC) $(MY_CFLAGS)
+MY_LDFLAGS += \
+	-Bstatic -L$(ROOTDIR)/lib/binutils/intl \
+	-L$(ROOTDIR)/user/popt/.libs \
+	-L$(ROOTDIR)/lib/binutils/bfd \
+	-L$(ROOTDIR)/lib/binutils/libiberty \
+	-L$(ROOTDIR)/uClibc/lib
+
+TARGET_PREFIX=/usr/local/share/oprofile/
+BUILD_PREFIX=$(ROOTDIR)/romfs/$(TARGET_PREFIX)
+
+RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
+	html-recursive info-recursive install-data-recursive \
+	install-exec-recursive install-info-recursive \
+	install-recursive installcheck-recursive installdirs-recursive \
+	pdf-recursive ps-recursive uninstall-info-recursive \
+	uninstall-recursive
+
+all:
+	# This is optional software, so it may not be cleaned even with a make distclean
+	# and will faile to build if we switch from LE to BE build and vice versa.
+	-test -f Makefile && make -f Makefile distclean
+	-rm -f Makefile config.cache config.h config.status
+	CC=$(CC) LD=$(LD) CFLAGS="$(MY_CFLAGS)" LDFLAGS="$(MY_LDFLAGS)" CXXFLAGS="$(MY_CXXFLAGS)" CPPFLAGS="$(MY_CPPFLAGS)"\
+	VERSION=\"0.9.1\" PACKAGE=\"oprofile\" \
+		./configure \
+		--target=$(TARGET)		\
+		--host=$(TARGET)	\
+		--build=i386-linux \
+		--prefix=/usr/local \
+		--with-kernel-support \
+		--with-linux=$(ROOTDIR)/$(LINUX_DIR) \
+		--with-module-dir=$(ROOTDIR)/romfs/lib/modules \
+		--with-package=yes \
+		--with-binutils=$(ROOTDIR)/lib/binutils \
+#		--cache-file=config.cache.brcmstb.$(TARGET_ARCH)
+	make -f Makefile
+
+#libiberty.a: libiberty-$(TARGET_ARCH).a
+#	-rm $@
+#	ln -s $< $@
+
+clean:
+	make -f Makefile clean
+
+distclean: clean
+	make -f Makefile distclean
+	-rm -f Makefile config.cache config.h config.status
+
+$(RECURSIVE_TARGETS) all-am am--refresh:
+	make -f Makefile $@
+
+romfs:
+	$(ROMFSINST) -e CONFIG_USER_PROFILE_OPROFILE_FULL ./pp/opannotate /usr/bin/opannotate
+	$(ROMFSINST) -e CONFIG_USER_PROFILE_OPROFILE_FULL ./pp/oparchive /usr/bin//oparchive
+	$(ROMFSINST) -e CONFIG_USER_PROFILE_OPROFILE -p 555 ./utils/opcontrol /usr/bin/opcontrol
+	$(ROMFSINST) -e CONFIG_USER_PROFILE_OPROFILE_FULL ./pp/opgprof /usr/bin/opgprof
+	$(ROMFSINST) -e CONFIG_USER_PROFILE_OPROFILE ./utils/ophelp /usr/bin/ophelp
+	$(ROMFSINST) -e CONFIG_USER_PROFILE_OPROFILE ./pp/opreport /usr/bin/opreport
+	$(ROMFSINST) -e CONFIG_USER_PROFILE_OPROFILE ./daemon/oprofiled /usr/bin/oprofiled
+	# Installed in lib
+	#$(ROMFSINST) -e CONFIG_USER_PROFILE_OPROFILE \
+	#	$(TOOL_DIR_PREFIX)/$(TARGET)-uclibc/lib/libstdc++.so.6 \
+	#	/lib/libstdc++.so.6
+	#$(ROMFSINST) -s ./libstdc++.so.6 /lib/libstdc++.so
+	#$(ROMFSINST) -e CONFIG_USER_PROFILE_OPROFILE \
+	#	$(TOOL_DIR_PREFIX)/$(TARGET)-uclibc/lib/libgcc_s.so.1 \
+	#	/lib/libgcc_s.so.1
+	#$(ROMFSINST) -s ./libgcc_s.so.1 /lib/libgcc_s.so
+	# Provide objdump since we already built it
+	$(ROMFSINST) -e CONFIG_USER_PROFILE_OPROFILE $(ROOTDIR)/lib/binutils/binutils/objdump /usr/bin/objdump
+
diff -ruNp oprofile.orig/utils/opcontrol oprofile/utils/opcontrol
--- oprofile.orig/utils/opcontrol	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/utils/opcontrol	2009-12-04 18:30:09.000000000 -0800
@@ -657,6 +657,13 @@ do_options()
 		case "$arg" in
 
 			--init)
+                                # PR19688: Test for memory config too small
+        			V=`cat /proc/meminfo | awk '/MemFree/ { print $2 }'`
+				if test $V -lt 16000 ; then
+					echo "Warning: Don't run Oprofile when MemFree<16M!" >&2
+					exit 1
+				fi
+
 				# this is already done in load_module
 				# because need to know the processor type
 				# and number of registers
@@ -919,7 +926,8 @@ do_stop()
 		echo "Stopping profiling."
 		echo 0 >/dev/oprofile/enable
 	fi
-	kill -s USR2 `cat $LOCK_FILE` 2>/dev/null
+        #kill -s USR2 `cat $LOCK_FILE` 2>/dev/null
+        kill -s 17 `cat $LOCK_FILE` 2>/dev/null
 }
 
 
@@ -1341,7 +1349,8 @@ do_start()
 	if test "$KERNEL_SUPPORT" = "yes"; then
 		echo 1 >$MOUNT/enable
 	fi
-	kill -s USR1 `cat $LOCK_FILE` 2>/dev/null
+	#kill -s USR1 `cat $LOCK_FILE` 2>/dev/null
+	kill -s 16 `cat $LOCK_FILE` 2>/dev/null
 	echo "Profiler running."
 }
 
@@ -1647,7 +1656,7 @@ check_version()
 
 # determine the location of opcontrol and related programs
 if test -z "$OPDIR"; then
-	BINDIR="/usr/bin"
+	BINDIR="/bin"
 	OPCONTROL=`$BINDIR/which $0`
 	OPDIR=`$BINDIR/dirname $OPCONTROL`
 fi
diff -ruNp oprofile.orig/utils/ophelp.c oprofile/utils/ophelp.c
--- oprofile.orig/utils/ophelp.c	2007-07-16 11:22:17.000000000 -0700
+++ oprofile/utils/ophelp.c	2009-12-04 18:30:09.000000000 -0800
@@ -511,6 +511,31 @@ int main(int argc, char const * argv[])
 		       "Downloadable from http://www.freescale.com\n");
 		break;
 
+	case CPU_MIPS_BCM7038:
+		printf("See MIPS64 5K Software User's Manual\n"
+			"Section 6.22: Performance Counter Register\n"
+		       "available from www.mips.com\n");
+		break;
+
+	case CPU_MIPS_BCM4350:
+		printf("See Brief Specification of BMIPS4350\n"
+			"page 63. Available from Broadcom Corp.\n");
+		break;
+
+	case CPU_MIPS_BCM3300:
+		printf("See BMIPS330 Architecture Specification\n"
+			"page 47-50. Available from Broadcom Corp.\n");
+		break;
+	case CPU_MIPS_BCM4380:
+                printf("See Brief Specification of BMIPS4380\n"
+                        "page 82. Available from Broadcom Corp.\n");
+                break;
+
+	case CPU_MIPS_BCM5000:
+                printf("See Brief Specification of BMIPS5000\n"
+                        "page xxx. Available from Broadcom Corp.\n");
+                break;
+
 	case CPU_RTC:
 		break;
 
