#
# THESE FILES WERE MODIFIED BY BROADCOM CORPORATION ON 2010-05-07
#
# Original package: procps-3.2.8.tar.bz2
#
diff -ruNp procps.orig/makefile procps/makefile
--- procps.orig/makefile	1969-12-31 16:00:00.000000000 -0800
+++ procps/makefile	2010-05-07 13:25:06.000000000 -0700
@@ -0,0 +1,56 @@
+#
+# General settings
+#
+
+include $(ROOTDIR)/config.arch
+
+BOGUS_TARGETS		:= FORCE makefile $(ROOTDIR)/config.arch
+
+CC			:= $(MACHINE)-linux-gcc
+STRIP			:= $(MACHINE)-linux-strip
+CFLAGS			:= -Os
+
+export CC CFLAGS
+
+#
+# Settings that are specific to this package
+#
+
+CPPFLAGS		:= -I$(ROOTDIR)/lib/ncurses/include
+CURSES			:= -L$(ROOTDIR)/lib/ncurses/lib -lncurses
+
+#
+# Build targets
+#
+
+.PHONY: all
+all::
+	$(MAKE) -f Makefile CPPFLAGS="$(CPPFLAGS)" CURSES="$(CURSES)"
+
+.PHONY: romfs
+romfs::
+	$(ROMFSINST) proc/libproc-3.2.8.so /lib/libproc-3.2.8.so
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_FREE /bin/free
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_KILL /bin/kill
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_PGREP /bin/pgrep
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_PKILL /bin/pkill
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_PS ps/ps /bin/ps
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_SNICE /bin/snice
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_SYSCTL /bin/sysctl
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_TLOAD /bin/tload
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_TOP /bin/top
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_UPTIME /bin/uptime
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_VMSTAT /bin/vmstat
+	$(ROMFSINST) -e CONFIG_USER_PROCPS_W /bin/w
+
+.PHONY: clean distclean
+clean distclean::
+	$(MAKE) -f Makefile clean
+
+# These targets must not be passed through to the original Makefile
+.PHONY: $(BOGUS_TARGETS)
+$(BOGUS_TARGETS)::
+
+# Everything else (maybe including clean, distclean) does get passed through
+%:: FORCE
+	$(MAKE) -f Makefile $@
diff -ruNp procps.orig/proc/sysinfo.c procps/proc/sysinfo.c
--- procps.orig/proc/sysinfo.c	2008-03-23 21:33:43.000000000 -0700
+++ procps/proc/sysinfo.c	2010-05-07 13:25:06.000000000 -0700
@@ -219,7 +219,40 @@ static void init_libproc(void){
   // appears to have a non-SMP kernel on a 2-way SMP box.
   // _SC_NPROCESSORS_CONF returns 2, resulting in HZ=512
   // _SC_NPROCESSORS_ONLN returns 1, which should work OK
+#if 1
+// jipeng - replace sysconf() since it always return 1 on SMP system in uClibc
+//	 Here we parse /proc/stat to get number of active CPUs
+#define	MAX_NUM_OF_CPUS		8
+
+	{
+		int fd;
+		int i;
+		char buff[BUFFSIZE];
+		const char* b;
+		char	cpus[4] = "cpu ";
+
+		buff[BUFFSIZE-1] = 0;
+		fd = open("/proc/stat", O_RDONLY, 0);
+		if(fd == -1)
+		{
+			perror("/proc/stat");
+			exit(EXIT_FAILURE);
+		}
+	
+		read(fd,buff,BUFFSIZE-1);
+		for (i = 0; i < MAX_NUM_OF_CPUS; i++) {
+			cpus[3] = '0' + i;
+			b = strstr(buff, cpus);
+			if(!b)
+			break;
+		}
+		smp_num_cpus = i;
+		close(fd);
+	}
+#else
   smp_num_cpus = sysconf(_SC_NPROCESSORS_ONLN);
+#endif
+
   if(smp_num_cpus<1) smp_num_cpus=1; /* SPARC glibc is buggy */
 
   if(linux_version_code > LINUX_VERSION(2, 4, 0)){ 
