#!/bin/bash

set -e

function tftp_fetch()
{
	if [ ! -z "$local_dir" ]; then
		if [ -e $local_dir/$2 ]; then
			cp $local_dir/$2 $3
			return 0
		elif [ -e $local_dir/${2#*/} ]; then
			cp $local_dir/${2#*/} $3
			return 0
		else
			echo "ERROR: can't find ${2#*/} in $local_dir"
			exit 1
		fi
	fi
        echo "Fetching via tftp: $1:$2"
        if ! tftp -g $1 -r $2 -l $3; then
            echo "tftp failed.  Aborting."
	    return 1
        fi
	return 0
}

function find_mtd_partition()
{
	arg=$1
	out=$2
	for x in /sys/class/mtd/mtd*; do
		if [ -e $x/name ]; then
			name=$(cat $x/name)

			# 0x400 = MTD_WRITEABLE
			flags=$(cat $x/flags)
			if [ "$name" = "$arg" \
					-a $(($flags & 0x400)) != 0 ]; then
				eval $out=${x#*mtd/mtd}
				return 0
			fi
		fi
	done
	return 1
}

function get_mtd_attr()
{
	arg0=$1
	arg1=$2
	out=$3
	file=/sys/class/mtd/mtd${arg0}/$arg1
	if [ -e $file ]; then
		retval=$(cat $file)
		eval $out=$retval
	else
		echo $file
		return 1
	fi
	return 0
}

function check_root()
{
	# make sure that we are not reformatting the active rootfs
	if [ -h /dev/root ]; then
		rootdev=$(readlink /dev/root)
		while [ ! -z $1 ]; do
			if [[ $rootdev = ${1}* ]]; then
				echo ""
				echo "ERROR: please run stbutil from the initrd kernel."
				echo ""
				exit 1
			fi
			shift
		done
	fi
}

# Install kernel to flash
function handle_opt_1()
{
	mtd=/dev/mtd${kernel_part}

	tftp_fetch $tftphost $tftpdir/vmlinuz-$plat /tmp/vmlinuz || exit 1
	flash_eraseall $mtd
	if [ "$flash_type" = "nand" ]; then
		nandwrite -p $mtd /tmp/vmlinuz
	else
		dd if=/tmp/vmlinuz of=$mtd
	fi
	echo ""
	echo "Finished writing kernel to flash."
	echo ""
	echo "To boot:"
	echo ""
	echo "  boot -z -elf flash0.kernel: 'ARGS'"
	echo ""
	echo "Sample ARGS: root=/dev/sda1"
	echo "             ubiroot"
	echo ""
	exit 0
}

# Install UBIFS rootfs to flash
function handle_opt_2()
{
	check_root mtd ubi
	mtd=/dev/mtd${rootfs_part}

	rem_img=ubifs-$(($flash_erasesize / 1024))k-$(($flash_writesize))-${plat}.img

	tftp_fetch $tftphost $tftpdir/$rem_img /tmp/rootfs.img || exit 1
	flash_eraseall $mtd
	ubiformat $mtd --yes --flash-image=/tmp/rootfs.img
	echo ""
	echo "Finished writing rootfs to flash."
	echo ""
	echo "Sample boot command line:"
	echo ""
	echo "  boot -z -elf $tftphost:$tftpdir/vmlinuz-$plat 'ubiroot'"
	echo ""
	echo "To mount the filesystem now:"
	echo ""
	echo "  ubiattach /dev/ubi_ctrl -m $rootfs_part"
	echo "  mount -t ubifs ubi0:rootfs /mnt/flash"
	echo ""
	exit 0
}

# Install JFFS2 rootfs to flash
function handle_opt_3()
{
	check_root mtd ubi
	mtd=/dev/mtd${rootfs_part}

	rem_img=jffs2-$(($flash_erasesize / 1024))k-${plat}.img

	tftp_fetch $tftphost $tftpdir/$rem_img /tmp/rootfs.img || exit 1
	flash_eraseall -j $mtd
	dd if=/tmp/rootfs.img of=$mtd
	echo ""
	echo "Finished writing rootfs to flash."
	echo ""
	echo "Sample boot command line:"
	echo ""
	echo "  boot -z -elf $tftphost:$tftpdir/vmlinuz-$plat 'rootfstype=jffs2 root=/dev/mtdblock${rootfs_part}'"
	echo ""
	echo "To mount the filesystem now:"
	echo ""
	echo "  mount -t jffs2 mtd${rootfs_part} /mnt/flash"
	echo ""
	exit 0
}

# Install SQUASHFS rootfs to flash
function handle_opt_4()
{
	check_root mtd ubi
	mtd=/dev/mtd${rootfs_part}

	rem_img=squashfs-${plat}.img

	tftp_fetch $tftphost $tftpdir/$rem_img /tmp/rootfs.img || exit 1
	flash_eraseall $mtd
	if [ "$flash_type" = "nand" ]; then
		imgsize=$(du -k /tmp/rootfs.img | sed 's/[ \t].*//')
		ubiformat $mtd --yes
		ubiattach /dev/ubi_ctrl -m $rootfs_part -d 0
		ubimkvol /dev/ubi0 -N squashfs -s ${imgsize}KiB
		if ! find_mtd_partition squashfs newpart; then
			echo "ERROR: can't find new squashfs partition"
			exit 1
		fi
		if ! get_mtd_attr $newpart erasesize new_erasesize; then
			echo "ERROR: can't get gluebi erasesize"
		fi
		dd if=/tmp/rootfs.img of=/dev/mtd${newpart} bs=$new_erasesize
		ubidetach /dev/ubi_ctrl -d 0
		cmdline="ubi.mtd=rootfs root=/dev/mtdblock${newpart}"
	else
		dd if=/tmp/rootfs.img of=$mtd
		cmdline="root=/dev/mtdblock${rootfs_part}"
	fi
	echo ""
	echo "Finished writing rootfs to flash."
	echo ""
	echo "Sample boot command line:"
	echo ""
	echo "  boot -z -elf $tftphost:$tftpdir/vmlinuz-$plat '$cmdline'"
	echo ""
	echo "To mount the filesystem now:"
	echo ""
	if [ "$flash_type" = "nand" ]; then
		echo "  ubiattach /dev/ubi_ctrl -m $rootfs_part"
		echo "  mount /dev/mtdblock${newpart} /mnt/flash"
		echo ""
		echo "OPTIONAL: Add a RW 'data' UBIFS to the same MTD partition:"
		echo ""
		echo "  ubiattach /dev/ubi_ctrl -m $rootfs_part"
		echo "  ubimkvol /dev/ubi0 -N data -m"
		echo "  mount -t ubifs ubi0:data /data"
	else
		echo "  mount /dev/mtdblock${newpart} /mnt/flash"
	fi
	echo ""
	exit 0
}

# Install rootfs to hard drive
function handle_opt_5()
{
	check_root sda
	echo "Writing partition table..."
	dd if=/dev/zero of=${hdd_dev} bs=1k count=40960 2> /dev/null
	cat /etc/partition-lba48.map | sfdisk -fq ${hdd_dev}

	mkfs.ext3 ${hdd_dev}1
	mkfs.ext3 ${hdd_dev}3
	mkfs.ext3 -N 16384 ${hdd_dev}4

	tune2fs -i 0 ${hdd_dev}1
	tune2fs -i 0 ${hdd_dev}3
	tune2fs -i 0 ${hdd_dev}4

	mkswap ${hdd_dev}2

	mount ${hdd_dev}1 /mnt/hd
	mkdir /mnt/hd/{sys,proc,tmp,dev,mnt}
	mknod /mnt/hd/dev/console c 5 1
	mkdir /mnt/hd/mnt/{hd,flash,usb,nfs}

	cd /
	for x in *; do
		if [ ! -e /mnt/hd/$x ]; then
			cp -a $x /mnt/hd/
		fi
	done

	umount ${hdd_dev}1

	echo ""
	echo "Finished writing rootfs to hard drive."
	echo ""
	echo "Sample boot command line:"
	echo ""
	echo "  boot -z -elf $tftphost:$tftpdir/vmlinuz-$plat"
	echo ""
	echo "To mount the filesystem now:"
	echo ""
	echo "  mount ${hdd_dev}1 /mnt/hd"
	echo ""
	exit 0
}

function usage()
{
	cat << EOF

stbutil v5.00 - Settop configuration utility
Copyright (C) 2009 Broadcom Corporation

Usage: stbutil [ -d <local_dir> ] [ -a <selection> ] [ <tftphost>[:<dir>] ]

Options:
	-d <local_dir>		Fetch images from LOCAL_DIR instead of tftp'ing
				them over the network
	-a <selection>		Use SELECTION as the menu item selection,
				instead of prompting the user
	<tftpdir>		TFTP server hostname
	<dir>			Directory (relative path) on TFTP server

Examples:
	stbutil
	stbutil linuxsrv:2631-1.0
	stbutil -d /mnt/usb
	stbutil -a1
	stbutil -a 1
	stbutil -d /mnt/usb -a 1

EOF
	exit 1
}

#
# MAIN
#

rootfs_part=
kernel_part=
flash_type=
flash_erasesize=
flash_writesize=
hdd_dev=

local_dir=
resp=
auto_resp=0

if [ ! -e /etc/brcmstb.conf ]; then
	echo "ERROR: missing /etc/brcmstb.conf"
else
	source /etc/brcmstb.conf
fi

# use default settings from brcmstb.conf
tftphost=$TFTPHOST
tftpdir=$TFTPDIR
plat=$PLAT

if find_mtd_partition rootfs rootfs_part; then
	if \
		! get_mtd_attr $rootfs_part type flash_type || \
		! get_mtd_attr $rootfs_part erasesize flash_erasesize || \
		! get_mtd_attr $rootfs_part writesize flash_writesize; then

		echo "Can't get flash info for rootfs"
		exit 1
	fi
fi

find_mtd_partition kernel kernel_part || true

# parse command line

while getopts "a:d:h" opt; do
	case $opt in
		d)
			local_dir=$OPTARG
			;;
		a)
			resp=$OPTARG;
			auto_resp=1
			;;
		h|?)
			usage
			;;
	esac
done
shift $(($OPTIND - 1))
if [ ! -z "$1" ]; then
	tftparg="$1"
	if [[ "$tftparg" = *:* ]]; then
		tftphost=${tftparg%%:*}
		tftpdir=${tftparg#*:}
	else
		tftphost=$tftparg
		tftpdir=""
	fi
fi

# construct menu

if [ -e /dev/sda ]; then
	hdd_dev=/dev/sda
else
	suf5="(not available)"
fi

[ -z $kernel_part ] && suf1="(not available)"

if [ -z $rootfs_part ]; then
	suf2="(not available)"
	suf3="$suf2"
	suf4="$suf2"
fi

if [ "$flash_type" = "nand" ]; then
	suf3="(not available)"
	suf4="(uses UBI)"
fi

for x in chip_id chip_rev cfe_boardname cpu_name; do
	eval $x=\"$(cat /sys/devices/platform/brcmstb/$x)\"
done

while :; do

	echo ""
	echo "stbutil v5.0"
	echo "------------"
	echo ""
	if [ -z "$local_dir" ]; then
		echo "Using TFTP server:     $tftphost"
		echo "Using TFTP path:       $tftpdir"
	else
		echo "Using local directory: $local_dir"
	fi
	echo "Linux build target:    $plat"

	echo ""
	echo "Chip ID register:      BCM${chip_id}${chip_rev}"
	echo "Board name:            ${cfe_boardname}"
	echo "CPU:                   ${cpu_name}"
	echo "Primary Linux flash:   ${flash_type:-none}"

	echo ""
	echo "1) Install non-initrd kernel image to flash $suf1"
	echo "2) Install UBIFS rootfs to flash (RW/RO) $suf2"
	echo "3) Install JFFS2 rootfs to flash (RW/RO) $suf3"
	echo "4) Install SQUASHFS rootfs to flash (RO) $suf4"
	echo "5) Install rootfs to hard drive $suf5"
	echo "q) Exit"
	echo ""
	echo -n "Selection: "

	if [ -z "$resp" ]; then
		read resp
	else
		echo $resp
	fi
	echo ""

	case $resp in
		[1-5])
			sufname='$'suf${resp}
			eval suf=$sufname
			if [[ "$suf" = *"not available"* ]]; then
				echo "ERROR: option is not available on this system"
			else
				eval handle_opt_${resp}
			fi
			;;
		q|0)
			exit 0
			;;
		*)
			echo "ERROR: invalid selection"
			;;
	esac
	resp=""
	if [ $auto_resp = 1 ]; then
		exit 0
	fi
done
